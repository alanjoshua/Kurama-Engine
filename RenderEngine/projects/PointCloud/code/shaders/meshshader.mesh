#version 450
#extension GL_EXT_mesh_shader : require

layout (set = 0, binding = 0) uniform CameraBuffer
{
	mat4 projview;
	mat4 view;
	mat4 proj;
    vec4 frustumPlanes[6];
} camera;

struct ObjectData {
    mat4 model;
    float scale;
    vec3 _padding;
};

layout(std430, set = 0, binding = 1) readonly buffer ObjectBuffer {
    ObjectData objects[];
}objectBuffer;

struct Vertex {
    vec4 pos;
    vec4 color;
//    vec2 tex;
//    vec2 _padding;
};

layout(std140, set = 0, binding = 2) readonly buffer VertexBuffer {
    Vertex vertices[];
}vertexBuffer;

// Binding 3: Indirect draw stats
layout (set = 0, binding = 3) buffer UBOOut
{
    int meshletDrawCount;
    int meshletUpdateCount;
} uboOut;

struct Meshlet {
    float vertexBegin;
    float vertexCount;
    float objectId;
    float density;
    vec4 bound; //vec3 = pos, w = bound sphere radius
    int treeDepth;
    ivec3 __; // padding
};

layout(std430, set = 1, binding = 0) readonly buffer MeshletBuffer {
    Meshlet meshlets[];
} meshletBuffer;

layout(set = 1, binding = 1) buffer UboIn {
    int meshletCount;
    int maxMeshletsToUpdate;
    int numDepthLevelsToRender;
    bool shouldRenderIndividualDepthLevels;
    float desiredDensity;
} uboIn;

layout(std140, set = 1, binding = 2) readonly buffer MeshletsToBeDrawn {
    int indices[];
} meshletsToBeDrawn;


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(points, max_vertices = 64, max_primitives = 64) out;

layout(location = 0) out VertexOutput
{
	vec4 color;
//    vec2 tex;
//    vec2 _padding;
} OUT[];

struct Task {
  uint baseID;
  uint subIDs[32];
};

taskPayloadSharedEXT Task task;


void main()
{
    uint meshletID = task.subIDs[gl_WorkGroupID.x];
    Meshlet curMeshlet = meshletBuffer.meshlets[meshletID];
    ObjectData relatedModel = objectBuffer.objects[int(curMeshlet.objectId)];

    int vertexCount = int(curMeshlet.vertexCount);
    int vertexBegin = int(curMeshlet.vertexBegin);

	mat4 mvp = camera.projview * relatedModel.model;

	for(int i = 0; i < vertexCount; i++) {
        int finalVertId = vertexBegin + i;

        gl_MeshVerticesEXT[i].gl_Position = mvp * (vertexBuffer.vertices[finalVertId].pos);
        gl_MeshVerticesEXT[i].gl_PointSize = max((8 - curMeshlet.treeDepth), 2);

        OUT[i].color = vertexBuffer.vertices[finalVertId].color;
//        OUT[i].tex = vertexBuffer.vertices[finalVertId].tex;
//        OUT[i]._padding = vertexBuffer.vertices[finalVertId]._padding;

        gl_PrimitivePointIndicesEXT[i] = finalVertId;
	}

    SetMeshOutputsEXT(vertexCount, vertexCount);

}