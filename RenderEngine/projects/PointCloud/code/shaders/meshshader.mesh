#version 450
#extension GL_EXT_mesh_shader : require

layout (set = 0, binding = 0) uniform CameraBuffer
{
	mat4 projview;
	mat4 view;
	mat4 proj;
} camera;

struct ObjectData {
    mat4 model;
};

layout(std430, set = 0, binding = 1) readonly buffer ObjectBuffer {
    ObjectData objects[];
}objectBuffer;

struct Vertex {
    vec4 pos;
    vec4 color;
};

layout(std140, set = 0, binding = 2) readonly buffer VertexBuffer {
    Vertex vertices[];
}vertexBuffer;

struct Meshlet {
    // x = int primitiveCount;
    // y = int vertexCount;
    // z = int indexBegin;
    // w = int vertexBegin;
    vec4 info;
    vec4 bound; //vec3 = pos, w = bound sphere radius
    vec4 objectId; //yzw are padding
};

layout(std140, set = 1, binding = 0) readonly buffer MeshletBuffer {
    Meshlet meshlets[];
} meshletBuffer;

layout(std430, set = 1, binding = 1) readonly buffer VertexIndexBuffer {
    int indices[];
} vertexIndexBuffer;

layout(std430, set = 1, binding = 2) readonly buffer LocalIndexBuffer {
    int indices[];
} localIndexBuffer;

layout(std140, set = 1, binding = 3) uniform MeshletCount {
    int count;
} meshletCount;


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

layout(location = 0) out VertexOutput
{
	vec4 color;
} OUT[];

struct Task {
  uint baseID;
  uint subIDs[32];
};

taskPayloadSharedEXT Task task;


void main()
{
	uint meshletID = (task.baseID * 32) + task.subIDs[gl_WorkGroupID.x];

    // Ensure we don't read past the meshlet buffer bounds
//    if(meshletID >= meshletCount.count - 7536) {
//        return;
//    }

//    if(meshletID >= 69) {
//        return;
//    }

    if(meshletID >= meshletCount.count) {
        return;
    }

    Meshlet curMeshlet = meshletBuffer.meshlets[meshletID];
    ObjectData relatedModel = objectBuffer.objects[int(curMeshlet.objectId.x)];

    int primitiveCount = int(curMeshlet.info.x);
    int vertexCount = int( curMeshlet.info.y);
    int indexBegin = int(curMeshlet.info.z);
    int vertexBegin = int(curMeshlet.info.w);

	mat4 mvp = camera.projview * relatedModel.model;

	for(int i = 0; i < vertexCount; i++) {
	    int baseId = vertexBegin + i;
        int finalVertId = vertexIndexBuffer.indices[baseId];

        gl_MeshVerticesEXT[i].gl_Position = mvp * (vertexBuffer.vertices[finalVertId].pos);
        OUT[i].color = vertexBuffer.vertices[finalVertId].color;
	}

	for (uint i = 0; i < primitiveCount; i++) {
        uint baseId = indexBegin + (i*3);

        uvec3 finalInds = uvec3(
            localIndexBuffer.indices[baseId + 0],
            localIndexBuffer.indices[baseId + 1],
            localIndexBuffer.indices[baseId + 2]
        );

        gl_PrimitiveTriangleIndicesEXT[i] = finalInds;
	}

    SetMeshOutputsEXT(vertexCount, primitiveCount);

}